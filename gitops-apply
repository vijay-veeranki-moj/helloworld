#!/bin/bash

set -o errexit
set -o pipefail
set -o nounset

# shellcheck source=.common.sh
# source "$(dirname ${BASH_SOURCE[0]})/.common.sh"

log() {
  _fg=''
  [ "${1}" = "red" ] && _fg='\033[0;31m'
  [ "${1}" = "blue" ] && _fg='\033[0;34m'
  [ "${1}" = "green" ] && _fg='\033[0;32m'
  shift
  # shellcheck disable=SC2145
  echo -e "${_fg}>>> ${@}\033[0m"
}

cluster="${PIPELINE_CLUSTER}"
echo ${cluster}
log green "applying for cluster ${cluster}"
( set -x; kubectl config use-context "${cluster}" ) || { log red "no context found, skipping ${cluster}" && exit 1; }
log blue "applying cluster-level resources for ${cluster}"
( set -x; kubectl apply -f "namespaces/${cluster}" ) || log blue "no global resources to apply"
for _f in namespaces/${cluster}/*; do
  if [ -d "${_f}" ]; then
    namespace="$(basename ${_f})"
    log blue "applying resources for namespace ${namespace} in ${cluster}"
    ( set -x; kubectl -n "${namespace}" apply -f "${_f}" )
    terraform_resources_path="namespaces/${cluster}/${namespace}/resources"
    # if [ -d "${terraform_resources_path}" ]; then
    #   (
    #     cd "${terraform_resources_path}"
    #     log blue "applying terraform resources for namespace ${namespace} in ${cluster}"
    #     terraform init \
    #       -backend-config="bucket=${PIPELINE_STATE_BUCKET}" \
    #       -backend-config="key=${PIPELINE_STATE_KEY_PREFIX}${cluster}/${namespace}/terraform.tfstate" \
    #       -backend-config="region=${PIPELINE_STATE_REGION}"
    #     terraform apply \
    #       -var="cluster_name=${cluster%%.*}" \
    #       -var="cluster_state_bucket=${PIPELINE_CLUSTER_STATE_BUCKET}" \
    #       -var="cluster_state_key=${PIPELINE_CLUSTER_STATE_KEY_PREFIX}${cluster%%.*}/terraform.tfstate" \
    #       -auto-approve
    #   )
    # fi
  fi
done
